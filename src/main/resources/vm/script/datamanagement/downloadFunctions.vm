## downloadFunctions.vm

## Variables
## $timeout, $minAvgDownloadThroughput, $bdiiTimeout, $srmTimeout, $failOverEnabled
## $failOverHost, $failOverPort, $failOverHome

function downloadLFN {

    local LFN=$1
    local LOCAL=${PWD}/`basename ${LFN}`

    #hacking LFN for N4U
    LFN=`echo $LFN | sed s/\\\/grid\\\/vo\\\.neugrid\\\.eu\\\/home\\\/vip/\\\/grid\\\/biomed\\\/creatis\\\/vip/g`

    info "getting file size and computing sendReceiveTimeout"
    size=`lfc-ls -l ${LFN} | awk -F' ' '{print $5}'`
    sendReceiveTimeout=`echo $[${size}/${minAvgDownloadThroughput}/1024]`
    if [ "$sendReceiveTimeout" = "" ] || [  $sendReceiveTimeout -le 900 ]; then echo "sendReceiveTimeout empty or too small, setting it to 900s"; sendReceiveTimeout=900; else echo "sendReceiveTimeout is $sendReceiveTimeout"; fi;
    info "Removing file ${LOCAL} in case it is already here"
    \rm -f ${LOCAL}

    info "Checking if the file is on local SE ${VO_BIOMED_DEFAULT_SE}"
    local closeSURL=`lcg-lr lfn:${LFN} | grep ${VO_BIOMED_DEFAULT_SE}`
    if [ "${closeSURL}" != "" ]
    then
        info "It is. Trying to download the file from there"
        LINE="lcg-cp -v --connect-timeout $timeout --sendreceive-timeout $sendReceiveTimeout --bdii-timeout $bdiiTimeout --srm-timeout $srmTimeout ${closeSURL} file:${LOCAL}"
        info ${LINE}
        ${LINE} &> lcg-log
        if [ $? = 0 ]
        then
            info "lcg-cp worked fine"
            lcg_source=`cat lcg-log | awk -F"://" '/Trying SURL srm/ {print $2}' | awk -F"/" '{print $1}'|awk -F":" '{print $1}'`;
            lcg_destination=`hostname`;
            lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`;
            info "DownloadCommand=lcg-cp Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time";
            if [ "${lcg_source}x" = "x" ] || [ "${lcg_destination}x" = "x" ] || [ "${lcg_time}x" = "x" ]
            then
                info "Missing lcg_log info, printing the whole file"
                cat lcg-log
            fi
            return 0
        else
            error "It failed, falling back on regular lcg-cp"
        fi
    else
        info "It's not, falling back on regular lcg-cp"
    fi


    info "Downloading file ${LFN}..."
    LINE="lcg-cp -v --connect-timeout $timeout --sendreceive-timeout $sendReceiveTimeout --bdii-timeout $bdiiTimeout --srm-timeout $srmTimeout lfn:${LFN} file:${LOCAL}"
    info ${LINE}
    ${LINE} &> lcg-log
    if [ $? = 0 ]
    then
       info "lcg-cp worked fine"
       lcg_source=`cat lcg-log | awk -F"://" '/Trying SURL srm/ {print $2}' | awk -F"/" '{print $1}'|awk -F":" '{print $1}'`;
       lcg_destination=`hostname`;
       lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`;
       info "DownloadCommand=lcg-cp Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time";
       if [ "${lcg_source}x" = "x" ] || [ "${lcg_destination}x" = "x" ] || [ "${lcg_time}x" = "x" ]
       then
         info "Missing lcg_log info, printing the whole file"
         cat lcg-log
       fi

    else
#if( $failOverEnabled )
        local FILENAME=`lcg-lr lfn:${LFN} | grep $failOverHost`
        #set( $generated = '${FILENAME#*generated}' )
        local PFILE=${generated}
        lcg-cp --nobdii --defaultsetype srmv2 -v srm://$failOverHost:$failOverPort/srm/managerv2?SFN=$failOverHome${PFILE} file:`pwd`/`basename ${LFN}`
        if [ $? = 0 ]
        then
            info "lcg-cp from Fail Over server worked fine"
        else
            error "lcg-cp failed"
            error "`cat lcg-log`"
            return 1
        fi
#else
        error "lcg-cp failed"
        error "`cat lcg-log`"
        return 1
#end
    fi
    \rm lcg-log
}
export -f downloadLFN

#
# URI are of the form of the following example.  A single "/", instead
# of 3, after "girder:" is also allowed.
# girder:///control_3DT1.nii?apiurl=http://localhost:8080/api/v1&fileId=5ae1a8fc371210092e0d2936&token=TFT2FdxP9hzM7WKsidBjMJMmN69
#
#
# The code is quite the same as the uploadGirderFile function.  Any
# changes should be done the same in both functions.
#
function downloadGirderFile {
    local URI=$1

    # The regexpes are written so that case is ignored and the
    # arguments can be in any order.
    local fileName=`echo $URI | sed -r 's#^girder:/(//)?([^/].*)\?.*$#\2#i'`
    local apiUrl=`echo $URI | sed -r 's/^.*[?&]apiurl=([^&]*)(&.*)?$/\1/i'`
    local fileId=`echo $URI | sed -r 's/^.*[?&]fileid=([^&]*)(&.*)?$/\1/i'`
    local token=`echo $URI | sed -r 's/^.*[?&]token=([^&]*)(&.*)?$/\1/i'`

    COMMLINE="girder-client --api-url ${apiUrl} -token ${token} download --parent-type file ${fileId} ${fileName}"
    echo "downloadGirderFile, command line is ${COMMLINE}"
    ${COMMLINE}
}
export -f downloadGirderFile

function downloadURI {

    local URI=$1
    local URI_LOWER=`echo $1 | awk '{print tolower($0)}'`

    if [[ ${URI_LOWER} == lfn* ]] || [[ $URI_LOWER == /* ]]
    then
        URI=`echo $URI | sed 's/lfn:\/\/.[^ :]\+:[0-9]\+\//\//g'`
        URI=`echo $URI | sed 's/lfn:\/\/.[^ /]\+//g'`
        URI=`echo $URI | sed 's/lfn://g'`
        checkCacheDownloadAndCacheLFN $URI
        validateDownload "Cannot download LFN file"
    fi

    if [[ ${URI_LOWER} == file://* ]]
    then
        URI=`echo $URI | sed 's/file:\/\///g'`
        cp $URI .
        validateDownload "Cannot copy file"
    fi

    if [[ ${URI_LOWER} == http://* ]]
    then
        curl --insecure -O ${URI}
        validateDownload "Cannot download HTTP file"
    fi

    if [[ ${URI_LOWER} == girder:/* ]]
    then
        downloadGirderFile ${URI}
        validateDownload "Cannot download Girder file"
    fi
}

function validateDownload() {

    if [ $? != 0 ]
    then
        error "$1"
        error "Exiting with return value 1"
        exit 1
    fi
}
