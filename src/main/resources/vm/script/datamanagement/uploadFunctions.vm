## uploadFunctions.vm

## Variables
## $timeout, $minAvgDownloadThroughput, $bdiiTimeout, $srmTimeout, $failOverEnabled

function nSEs {

    i=0
    for n in ${SELIST}
    do
        i=`expr $i + 1`
    done
    return $i
}

function getAndRemoveSE {

    local index=$1
    local i=0
    local NSE=""
    RESULT=""
    for n in ${SELIST}
    do
        if [ "$i" = "${index}" ]
        then
            RESULT=$n
            info "result: $RESULT"
        else
            NSE="${NSE} $n"
        fi
        i=`expr $i + 1`
    done
    SELIST=${NSE}
    return 0
}

function chooseRandomSE {

    nSEs
    local n=$?
    if [ "$n" = "0" ]
    then
        info "SE list is empty"
        RESULT=""
    else
        local r=${RANDOM}
        local id=`expr $r  % $n`
        getAndRemoveSE ${id}
    fi
}

function renameLfnFile {

    local FROM=$1
    local TO=$2

    info "Renaming ${FROM} to ${TO}"
    lfc-ls ${TO}
    if [ $? != 0 ]
    then
        lfc-rename ${FROM} ${TO}
        if [ $? != 0 ]
        then
            exit 2
        fi
    else
        deleteFile lfn:${FROM}
    fi
}

function uploadLfnFile {

    local LFN=$1
    local FILE=$2
    local nrep=$3
    local SELIST=${SE}

    info "getting file size and computing sendReceiveTimeout"
    size=`ls -l ${FILE} | awk -F' ' '{print $5}'`
    sendReceiveTimeout=`echo $[${size}/${minAvgDownloadThroughput}/1024]`
    if [ "$sendReceiveTimeout" = "" ] || [  $sendReceiveTimeout -le 900 ]; then echo "sendReceiveTimeout empty or too small, setting it to 900s"; sendReceiveTimeout=900; else echo "sendReceiveTimeout is $sendReceiveTimeout"; fi;

    local OPTS="--connect-timeout $timeout --sendreceive-timeout $sendReceiveTimeout --bdii-timeout $bdiiTimeout --srm-timeout $srmTimeout"
    local DEST=""
    if [ "${USE_CLOSE_SE}" = "true" ] && [ "${VO_BIOMED_DEFAULT_SE}" != "" ]
    then
        DEST=${VO_BIOMED_DEFAULT_SE}
    else
        chooseRandomSE
        DEST=${RESULT}
    fi
    done=0
    while [ $nrep -gt $done ] && [ "${DEST}" != "" ]
    do
        if [ "${done}" = "0" ]
        then
            lcg-del -v -a ${OPTS} lfn:${LFN} &>/dev/null
            lfc-ls ${LFN}
            if [ $? = 0 ]
            then
                lfc-rename ${LFN} ${LFN}-garbage-${HOSTNAME}-${PWD}
            fi
            flag="cr"
            lfc-mkdir -p `dirname ${LFN}`
            lcg-cr -v ${OPTS} -d ${DEST} -l lfn:${LFN} file:${FILE} &> lcg-log
        else
            flag="rep"
            lcg-rep -v ${OPTS} -d ${DEST} lfn:${LFN} &> lcg-log
        fi
        if [ $? = 0 ]
        then
            info "lcg-cr/rep of ${LFN} to SE ${DEST} worked fine"
            done=`expr ${done} + 1`
                    if [ $flag = "cr" ]
            then
                lcg_source=`hostname`
                lcg_destination=$DEST
                lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`
                info "UploadCommand=lcg-cr Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time"
                if [ "${lcg_source}x" = "x" ] || [ "${lcg_destination}x" = "x" ] || [ "${lcg_time}x" = "x" ]
                then
                        info "Missing lcg_log info, printing the whole file"
                        cat lcg-log
                fi

            else
                lcg_source=`cat lcg-log | awk -F"://" '/Trying SURL srm/ {print $2}' | awk -F"/" '{print $1}'|awk -F":" '{print $1}'`
                lcg_destination=$DEST
                lcg_time=`cat lcg-log | awk '/Transfer took/ {print $3$4}'`
                info "UploadCommand=lcg-rep Source=$lcg_source Destination=$lcg_destination Size=$size Time=$lcg_time"
                if [ "${lcg_source}x" = "x" ] || [ "${lcg_destination}x" = "x" ] || [ "${lcg_time}x" = "x" ]
                then
                        info "Missing lcg_log info, printing the whole file"
                        cat lcg-log
                fi
            fi
        else
            error "`cat lcg-log`"
            warning "lcg-cr/rep of ${LFN} to SE ${DEST} failed"
        fi
        \rm lcg-log
        chooseRandomSE
        DEST=${RESULT}
    done
    if [ "${done}" = "0" ]
    then
#if( $failOverEnabled )
        addToFailOver ${LFN} ${FILE}
        if [ $? = 0 ]
        then
            addToCache ${LFN} ${FILE}
        else
            error "Cannot lcg-cr file ${FILE} to lfn ${LFN}"
            error "Exiting with return value 2"
            exit 2
        fi
#else
        error "Cannot lcg-cr file ${FILE} to lfn ${LFN}"
        error "Exiting with return value 2"
        exit 2
#end
    else
        addToCache ${LFN} ${FILE}
    fi
}

#
# URI are of the form of the following example.  A single "/", instead
# of 3, after "girder:" is also allowed.
# girder:///control_3DT1.nii?apiurl=http://localhost:8080/api/v1&fileId=5ae1a8fc371210092e0d2936&token=TFT2FdxP9hzM7WKsidBjMJMmN69
#
# The code is quite the same as the downloadGirderFile function.  Any
# changes should be done the same in both functions.
#
function uploadGirderFile {
    local URI=$1

    # The regexpes are written so that case is ignored and the
    # arguments can be in any order.
    local fileName=`echo $URI | sed -r 's#^girder:/(//)?([^/].*)\?.*$#\2#i'`
    local apiUrl=`echo $URI | sed -r 's/^.*[?&]apiurl=([^&]*)(&.*)?$/\1/i'`
    local fileId=`echo $URI | sed -r 's/^.*[?&]fileid=([^&]*)(&.*)?$/\1/i'`
    local token=`echo $URI | sed -r 's/^.*[?&]token=([^&]*)(&.*)?$/\1/i'`

    COMMLINE="girder-client --api-url ${apiUrl} -token ${token} upload --parent-type folder ${fileId} ${fileName}"
    echo "uploadGirderFile, command line is ${COMMLINE}"
    ${COMMLINE}
}

function upload {

    local URI=$1
    local ID=$2
    local NREP=$3
    local TEST=$4

    startLog file_upload uri="${URI}"

    ## The pattern must NOT be put between quotation marks.
    if [[ ${URI} == girder:/* ]]
    then
        uploadGirderFile ${URI}
    else
        \# Extract the path part from the uri.
        local LFN=`echo ${URI} | sed -r 's%^\w+://[^/]*(/[^?]+)(\?.*)?$%\1%'`
#set( $fileName = '${LFN##*/}' )
        local NAME=${fileName}

        if [ "${TEST}" = "true" ]
        then
            LFN=${LFN}-uploadTest
            echo "test result" > ${NAME}
        fi

        uploadLfnFile ${LFN}${ID} ${PWD}/${NAME} ${NREP}
        renameLfnFile ${LFN}${ID} ${LFN}

        if [ "${TEST}" = "true" ]
        then
            \rm -f ${NAME}
        fi
    fi
    stopLog file_upload
}
